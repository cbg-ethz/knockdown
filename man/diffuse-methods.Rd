% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inference_diffuse.R
\docType{methods}
\name{diffuse}
\alias{diffuse}
\alias{diffuse,HMAnalysedPerturbationData-method}
\title{Network diffusion}
\usage{
diffuse(obj, graph = NULL, r = 0.5, delete.nodes.on.degree = 0,
  do.bootstrap = FALSE, take.largest.component = TRUE,
  correct.for.hubs = TRUE)

\S4method{diffuse}{HMAnalysedPerturbationData}(obj, graph = NULL,
  r = 0.5, delete.nodes.on.degree = 0, do.bootstrap = FALSE,
  take.largest.component = TRUE, correct.for.hubs = TRUE)
}
\arguments{
\item{obj}{\code{HMAnalysedPerturbationData} object}

\item{graph}{a \code{data.frame} or \code{tibble} with three columns
representing a symbolic edge list.
The first two columns contain node ids. The third column has to be called
\emph{weight} and is the \emph{non-negative} weight of the edge between
the two nodes.}

\item{r}{restart probability of the random walk}

\item{delete.nodes.on.degree}{delete nodes from the graph with a degree of
less or equal than \code{delete.nodes.on.degree}}

\item{do.bootstrap}{run a diffusion on every bootstrap sample in case
bootstrap samples are available}

\item{take.largest.component}{if \code{true} takes only the largest
connected component of the graph and discards all nodes that are not in
the largest component. If \code{false} takes the compete graph.}

\item{correct.for.hubs}{if true corrects for the fact that the stationary
distribution of the random walk is biased towards hubs.}
}
\value{
returns a \code{NetworkAnalysedPerturbationData} object
}
\description{
Propagate the estimated gene effects from a previous analysis
 over a network using network diffusion. First the estimated effects are
 normalized and mapped to a given genetic network, for instance a PPI or
 co-expression network. Then the normalized effects are propagated across
 the edges of the network using a Markov random walk with restarts.
 By that the initial ranking of genes
 (as given by their absolute effect sizes) is re-evaluated and the genes are
 reordered. Thus network diffusion potentially reduced false negative hits.
}
\examples{
 data(rnaiscreen)
 hm.fit <- hm(rnaiscreen)

 graph <- readRDS(system.file(
   "extdata", "graph_small.rds", package = "perturbatr"))
 res <- diffuse(hm.fit, graph=graph, r=1)

}
